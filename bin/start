#!/bin/bash -ex

function print_help() {
  cat << EOF
Test the secrets-provider-for-k8s image. This script sets up a Conjur cluster in k8s and deploys a k8s environment with an app
container and a secrets-provider-for-k8s init container. Finally it tests that the outcome is as expected (for example,
in the vanilla flow it verifies that the Conjur secret was provided to the app container via the environment.

Usage: ./bin/start [options]
    --docker      Run the integation tests in a docker container. This is helpful when running the test in a machine that
                  doesn't have "oc" or "kubectl" installed on it.

    --dev         Run the development environment. By default the environment is run against a Conjur OSS deployment on GKE.

    --reload      Run reload to rebuild and redeploy changes done in Secrets Provider to a local cluster without redeploying DAP/Conjur.

    --oss         Run the integration tests with a OSS Conjur deployment. By default the tests are run against a Conjur OSS deployment.

    --dap         Run the integration tests with a DAP Conjur deployment. By default the tests are run against a Conjur OSS deployment.

    --gke         Run the integration tests on GKE. By default the tests are run on GKE.

    --oc311       Run the integration tests on Openshift v3.11. By default the tests are run on GKE.

    --oc310       Run the integration tests on Openshift v3.10. By default the tests are run on GKE.

    -h, --help    Shows this help message.
EOF
  exit
}

function runScriptWithSummon() {
    summon --environment $SUMMON_ENV -f ./summon/secrets.yml $1
}

RUN_IN_DOCKER=false
CONJUR_DEPLOYMENT=oss
SUMMON_ENV=gke
RELOAD_ENV=false
DEV=false

while true ; do
  case "$1" in
    --docker ) RUN_IN_DOCKER=true ; shift ;;
    --dev ) DEV=true ; shift ;;
    --reload ) RELOAD_ENV=true ; shift ;;
    --oss ) CONJUR_DEPLOYMENT=oss ; shift ;;
    --dap ) CONJUR_DEPLOYMENT=dap ; shift ;;
    --gke ) SUMMON_ENV=gke ; shift ;;
    --oc311 ) SUMMON_ENV=oc311 ; shift ;;
    --oc310 ) SUMMON_ENV=oc310 ; shift ;;
    -h | --help ) print_help ; shift ;;
     * ) if [ -z "$1" ]; then break; else echo "$1 is not a valid option"; exit 1; fi;;
  esac
done

if [[ "${DEV}" = "false" && $RELOAD_ENV = true ]]; then
  echo "Error: --reload should be configured with --dev"
  exit 1
fi

export RUN_IN_DOCKER
export CONJUR_DEPLOYMENT
export DEV

# summon environment variable
export CONJUR_MAJOR_VERSION=4

source bootstrap.env

pushd deploy
  if [[ $RUN_IN_DOCKER = true ]]; then
    # this option cannot run locally due to lack of docker credentials. It works only in the Jenkins pipeline
    runScriptWithSummon ./test/test_in_docker.sh
  elif [[ "${DEV}" = "true" && $RELOAD_ENV = true ]]; then
    ./dev/reload.sh
  elif [[ "${DEV}" = "true" ]]; then
    ./run.sh
  else
    runScriptWithSummon ./run.sh
  fi
popd
