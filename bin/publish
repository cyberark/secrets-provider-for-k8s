#!/bin/bash

set -e

# The following is used to:
# Publish images on pre-release and tag as edge
# Promote pre-releases to releases and tag as latest

. bin/build_utils

function print_help() {
  echo "Release Usage: $0"
  echo "Promote Usage: $0 --source <VERSION> --target <VERSION>"
  echo " --source <VERSION>: specify version number of local image"
  echo " --target <VERSION>: specify version number of remote image"
}

while [[ $# -gt 0 ]]; do
  echo "in while loop"
  case "$1" in
  --source)
    SOURCE_TAG="$2"
    shift
    ;;
  --target)
    REMOTE_TAG="$2"
    shift
    ;;
  --help)
    print_help
    exit 1
    ;;
  *)
    echo "Unknown option: $1"
    print_help
    exit 1
    ;;
  esac
  shift
done

# Version derived from CHANGLEOG and automated release library
VERSION=$(<VERSION)
readonly VERSION
FULL_VERSION_TAG="$VERSION-$(git_tag)"
readonly FULL_VERSION_TAG
readonly REDHAT_IMAGE="scan.connect.redhat.com/ospid-56594c20-22fc-4eeb-9c2e-402cf43bcb79/secrets-provider-for-k8s"

readonly IMAGE_NAME="secrets-provider-for-k8s"

readonly REGISTRY='cyberark'

# Defaults to edge release when no flags are specified.
if [[ -z ${REMOTE_TAG:-} && -z ${SOURCE_TAG:-} ]]; then
  echo "Performing edge release."
  REMOTE_TAG=edge
  SOURCE_TAG="$VERSION-$(git_tag)"
  readonly TAGS=(
    "$VERSION"
    "$REMOTE_TAG"
  )

  for tag in "${TAGS[@]}"; do
    echo "Tagging and pushing $REGISTRY/$IMAGE_NAME:$tag"
    #neil
    echo "docker tag "$IMAGE_NAME:$SOURCE_TAG" "$REGISTRY/$IMAGE_NAME:$tag""
    #neil
    echo "docker push "$REGISTRY/$IMAGE_NAME:$tag""
  done
elif [[ -z ${REMOTE_TAG:-} || -z ${SOURCE_TAG:-} ]]; then
  echo "Missing promotion flag(s)."
  print_help
  exit 1

elif [[ -v REMOTE_TAG && -v SOURCE_TAG ]]; then
  # Promotes image based on flag values provided
  echo "Promoting image to $REMOTE_TAG"
  readonly TAGS=(
    "$REMOTE_TAG"
    "latest"
  )

  for tag in "${TAGS[@]}" $(gen_versions "$REMOTE_TAG"); do
    echo "Tagging and pushing $REGISTRY/$IMAGE_NAME:$tag"
    #neil
    echo "docker tag "$IMAGE_NAME:$SOURCE_TAG" "$REGISTRY/$IMAGE_NAME:$tag""
    #neil
    echo "docker push "$REGISTRY/$IMAGE_NAME:$tag""
  done

  # Publish RedHat image to Internal Registry
  #neil
  echo "docker tag "secrets-provider-for-k8s-redhat:${FULL_VERSION_TAG}" "$REGISTRY/secrets-provider-for-k8s-redhat:${VERSION}""
  #neil
  echo "docker push "$REGISTRY/secrets-provider-for-k8s-redhat:${VERSION}""

  # Publish only latest to Redhat Registries
  echo "Tagging and pushing ${REDHAT_IMAGE}"
  #neil
  echo "docker tag "secrets-provider-for-k8s-redhat:${FULL_VERSION_TAG}" "${REDHAT_IMAGE}:${VERSION}""

  # Publish RedHat image to RedHat Registry
  if docker login scan.connect.redhat.com -u unused -p "${REDHAT_API_KEY}"; then
    # you can't push the same tag twice to redhat registry, so ignore errors
    #neil
    if ! echo "docker push "${REDHAT_IMAGE}:${VERSION}""; then
      echo 'Red Hat push FAILED! (maybe the image was pushed already?)'
      exit 0
    fi
  else
    echo 'Failed to log in to scan.connect.redhat.com'
    exit 1
  fi

else
  echo "in else statement"
  print_help
  exit 1
fi
